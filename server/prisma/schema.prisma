// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum pour gérer les statuts d'utilisateur
enum UserStatus {
  Active
  Suspend
  Delete
}

// Enum pour les rôles d'utilisateur
enum RoleName {
  User
  Admin
  SupraAdmin
}

// Modèle 'Role' pour les rôles d'utilisateur
model Role {
  id   Int      @id @default(autoincrement())
  name RoleName @unique
  // Relation many-to-many avec User
  users User[]  @relation("UserRoles")
}

// Modèle 'User'
model User {
  id                  Int         @id @default(autoincrement())
  email               String      @unique @db.VarChar(100)
  telephone           String?     @db.VarChar(20)
  password            String?     @db.VarChar(255)
  verified            Boolean     @default(false)
  status              UserStatus  @default(Active)
  civility            String?     @db.VarChar(30)
  lastName            String      @db.VarChar(50)
  firstName           String      @db.VarChar(50)
  photoProfile        String?     @db.VarChar(255)
  webpPhotoProfile    String?     @db.VarChar(255)
  displayFullName     Boolean     @default(true)
  dateRegistration    DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  roles               Role[]      @relation("UserRoles")
  posts               Post[]
  topics              Topic[]
}

// Modèle Category
model Category{
  id                  Int         @id @default(autoincrement())
  name                String      @unique @db.VarChar(100)
  slug                String      @unique @db.VarChar(100)

  topics              Topic[]
}

// Modèle Topic
model Topic{
  id                  Int         @id @default(autoincrement())
  title               String      @db.VarChar(255)
  slug                String      @unique @db.VarChar(255)
  createdAt           DateTime    @default(now())
  lock                Boolean     @default(false)
  nbrPosts            Int         @default(0)
  lastPostId          Int?        @unique
  categoryId          Int
  authorId            Int

  posts               Post[]
  category            Category    @relation(fields: [categoryId], references: [id])
  lastPost            Post?       @relation("TopicHasLastPost", fields: [lastPostId], references: [id])
  author              User        @relation(fields: [authorId], references: [id])
}

// Modèle Post
model Post{
  id                  Int         @id @default(autoincrement())
  message             String      @db.Text
  createdAt           DateTime    @default(now())
  isEdited            DateTime    @updatedAt

  authorId            Int
  topicId             Int
  author              User        @relation(fields: [authorId], references: [id])
  topic               Topic       @relation(fields: [topicId], references: [id])
  topicAsLastPost     Topic?      @relation("TopicHasLastPost")
}
